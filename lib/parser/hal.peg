{
    function extractList(list, index) {
        var result = new Array(list.length), i;

        for (i = 0; i < list.length; i++) {
           result[i] = list[i][index];
        }

        return result;
    }

    function buildList(head, tail, index) {
        return [head].concat(extractList(tail, index));
    }

    function optionalList(value) {
        return value !== null ? value : [];
    }
}

Start
    = __ program:Program __ { return program; }

/* ----- Lexical grammar ----- */

TypeDefinition
    = "string" _ [0-9]*
    / "array" _ [0-9]*
    / "integer"
    / "boolean"
    / "longint"
    / "val"
    / "date"

AssignmentOperator
  = "*="
  / "/="
  / "%="
  / "+="
  / "-="
  / "<<="
  / ">>="
  / ">>>="
  / "&="
  / "^="
  / "|="

SourceCharacter
    = .

ReservedWord "reserved word"
    = "ololo"

IdentifierStart
    = [a-zA-Z]
    / "$"
    / "_"

IdentifierPart
    = IdentifierStart
    / [0-9]

EOS
    = __ ";"
    / _ LineTerminatorSequence
    / __ EOF



LineTerminatorSequence "end of line"
    = "\n"
    / "\r\n"
    / "\r"

EOF
    = !.

_
    = (WhiteSpace)*

__
    = (WhiteSpace / LineTerminatorSequence)*

WhiteSpace
    = " "


Identifier
    = !ReservedWord name:IdentifierName { return name; }

IdentifierName "identifier"
    = head:IdentifierStart tail:IdentifierPart* {
        return {
          type: "Identifier",
          name: head + tail.join("")
        };
      }

/* ----- Statements ----- */

Statement
  = VariableStatement
  / ExpressionStatement

VariableStatement
    = TypeDefinition __ declarations:VariableDeclarationList EOS {
        return {
            type:         "VariableDeclaration",
            declarations: declarations,
            kind: "let"
        };
    }

VariableDeclarationList
    = head:VariableDeclaration tail:(__ "," __ VariableDeclaration)* {
        return buildList(head, tail, 3);
    }

VariableDeclaration
    = id:Identifier {
        return {
            type: "VariableDeclarator",
            id:   id
        };
    }

ExpressionStatement
  =expression:Expression EOS {
      return {
        type:       "ExpressionStatement",
        expression: expression
      };
    }

Expression
  = head:AssignmentExpression tail:(__ "," __ AssignmentExpression)* {
      return tail.length > 0
        ? { type: "SequenceExpression", expressions: buildList(head, tail, 3) }
        : head;
    }

AssignmentExpression
  = left:LeftHandSideExpression __
    "=" !"=" __
    right:AssignmentExpression
    {
      return {
        type:     "AssignmentExpression",
        operator: "=",
        left:     left,
        right:    right
      };
    } 


/* ----- Functions and Programs ----- */

Program
    = body:SourceElements? {
        return {
            type: "File",
            program: {
                type: "Program",
                body: optionalList(body)
            }
        };
    }

SourceElements
    = head:SourceElement tail:(__ SourceElement)* {
        return buildList(head, tail, 1);
    }

SourceElement
  = Statement
