
Start
    = __ program:Program __ { return program; }

/* ----- Lexical grammar ----- */

/* Tokens */

ElseToken       = "else"       !IdentifierPart
FalseToken      = "false"      !IdentifierPart
ForToken        = "for"        !IdentifierPart



FunctionToken   = "function"   !IdentifierPart
IfToken         = "if"         !IdentifierPart
ReturnToken     = "return"     !IdentifierPart
TrueToken       = "true"       !IdentifierPart
FalseToken      = "false"      !IdentifierPart

TypeDefinition
    = "string" _ [0-9]*
    / "array" _ [0-9]*
    / "integer"
    / "boolean"
    / "longint"
    / "val"
    / "date"

AssignmentOperator
  = "*="
  / "/="
  / "%="
  / "+="
  / "-="
  / "<<="
  / ">>="
  / ">>>="
  / "&="
  / "^="
  / "|="

SourceCharacter
    = .

ReservedWord "reserved word"
    = "ololo"

IdentifierStart
    = [a-zA-Z]
    / "$"
    / "_"

IdentifierPart
    = IdentifierStart
    / [0-9]

EOS
    = __ ";"
    / _ LineTerminatorSequence
    / __ EOF



LineTerminatorSequence "end of line"
    = "\n"
    / "\r\n"
    / "\r"

LineTerminator
  = [\n\r\u2028\u2029]

EOF
    = !.

_
    = (WhiteSpace)*

__
    = (WhiteSpace / LineTerminatorSequence)*

WhiteSpace
    = " "

Literal
  = BooleanLiteral
  / Identifier
  / NumericLiteral
  / StringLiteral

StringLiteral "string"
  = '"' chars:DoubleStringCharacter* '"' {
      return { type: "StringLiteral", value: chars.join("") };
    } 

DoubleStringCharacter
  = !('"' / "\\" / LineTerminator) SourceCharacter { return text(); }
  / "\\" sequence:EscapeSequence { return sequence; }
  / LineContinuation


LineContinuation
  = "\\" LineTerminatorSequence { return ""; }

EscapeSequence
  = CharacterEscapeSequence
  / "0" !DecimalDigit { return "\0"; } 

CharacterEscapeSequence
  = SingleEscapeCharacter
  / NonEscapeCharacter

SingleEscapeCharacter
  = "'"
  / '"'
  / "\\"
  / "b"  { return "\b";   }
  / "f"  { return "\f";   }
  / "n"  { return "\n";   }
  / "r"  { return "\r";   }
  / "t"  { return "\t";   }
  / "v"  { return "\x0B"; }   // IE does not recognize "\v".

NonEscapeCharacter
  = !(EscapeCharacter / LineTerminator) SourceCharacter { return text(); }

EscapeCharacter
  = SingleEscapeCharacter
  / DecimalDigit
  / "x"
  / "u"

NumericLiteral 
    = literal: DecimalLiteral !(IdentifierStart / DecimalDigit) {
      return literal;
    }

DecimalLiteral
  = DecimalIntegerLiteral "." DecimalDigit* ExponentPart? {
      return { type: "NumericLiteral", value: parseFloat(text()) };
    }
  / "." DecimalDigit+ ExponentPart? {
      return { type: "NumericLiteral", value: parseFloat(text()) };
    }
  / DecimalIntegerLiteral ExponentPart? {
      return { type: "NumericLiteral", value: parseFloat(text()) };
    }

DecimalIntegerLiteral
  = "0"
  / NonZeroDigit DecimalDigit*

DecimalDigit
  = [0-9]

NonZeroDigit
  = [1-9]

ExponentPart
  = ExponentIndicator SignedInteger

ExponentIndicator
  = "e"i

SignedInteger
  = [+-]? DecimalDigit+

BooleanLiteral
  = TrueToken  { return { type: "BooleanLiteral", value: true  }; }
  / FalseToken { return { type: "BooleanLiteral", value: false }; }

Identifier
    = !ReservedWord name:IdentifierName { return name; }

IdentifierName "identifier"
    = head:IdentifierStart tail:IdentifierPart* {
        return {
          type: "Identifier",
          name: head + tail.join("")
        };
      }

/* ----- Statements ----- */

Statement
  = VariableStatement
  / Block
  / IfStatement
  / ExpressionStatement
  / ReturnStatement

Block
    = "begin" __ body:(StatementList __)? "end" {
        return {
            type: "BlockStatement",
            body: optionalList(extractOptional(body, 0))
        };
    }

StatementList
    = head:Statement tail:(__ Statement)* { return buildList(head, tail, 1); }

VariableStatement
    = TypeDefinition __ declarations:VariableDeclarationList EOS {
        return {
            type:         "VariableDeclaration",
            declarations: declarations,
            kind: "let"
        };
    }

VariableDeclarationList
    = head:VariableDeclaration tail:(__ "," __ VariableDeclaration)* {
        return buildList(head, tail, 3);
    }

VariableDeclaration
    = id:Identifier {
        return {
            type: "VariableDeclarator",
            id:   id
        };
    }
  
PrimaryExpression
  = Identifier
  / "(" __ expression:Expression __ ")" { return expression; }

 

Arguments
  = "(" __ args:(ArgumentList __)? ")" {
      return optionalList(extractOptional(args, 0));
    }
ArgumentList
  = head:AssignmentExpression tail:(__ "," __ AssignmentExpression)* {
      return buildList(head, tail, 3);
    }

ExpressionStatement
  = !"return" !("end" / FunctionToken) expression:Expression EOS {
      return {
        type:       "ExpressionStatement",
        expression: expression
      };
    }

Expression
    = head:AssignmentExpression tail:(__ "," __ AssignmentExpression)* {
        return tail.length > 0
            ? { type: "SequenceExpression", expressions: buildList(head, tail, 3) }
        : head;
    }

IfStatement
    = IfToken __ "(" __ test:Expression __ ")" __ "then" __
        consequent:Statement __
        ElseToken __
        alternate:Statement {
            return {
                type:       "IfStatement",
                test:       test,
                consequent: consequent,
                alternate:  alternate
            };
        }
    / IfToken __ "(" __ test:Expression __ ")" __
        consequent:Statement {
            return {
                type:       "IfStatement",
                test:       test,
                consequent: consequent,
                alternate:  null
            };
        }

MemberExpression
  = head: Literal
    {
      return buildTree(head, [], function(result, element) {
        return {
          type:     "MemberExpression",
          object:   result,
          property: element.property,
          computed: element.computed
        };
      });
    }


SideExpression
  = CallExpression
  /MemberExpression

AssignmentExpression
  = left:SideExpression  __
    "=" !"=" __
    right: AssignmentExpression 
    {
      return {
        type:     "AssignmentExpression",
        operator: "=",
        left:     left,
        right:    right
      };
    } 
    / left:  SideExpression __
    operator:AssignmentOperator __
    right:   AssignmentExpression
    {
      return {
        type:     "AssignmentExpression",
        operator: operator,
        left:     left,
        right:    right
      };
    }
    /LogicalORExpression


ReturnStatement
    = ReturnToken EOS {
        return { type: "ReturnStatement", argument: null };
    }

/* ----- Functions and Programs ----- */

FunctionDeclaration
  = FunctionToken __ TypeDefinition __ id:Identifier __
    "(" __ params:(FormalParameterList __)? ")" __
    "begin" __ body:FunctionBody __ "end" __ EOS
    {
      body.body.unshift({
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name":  id.name
            },
            "init": null
          }
        ],
        "kind": "let"
      });

      prepareReturn(body.body, id.name);

      return {
        type:   "FunctionDeclaration",
        id:     id,
        params: optionalList(extractOptional(params, 0)),
        body:   body
      };
    }

FormalParameterList
    = TypeDefinition __ head:Identifier tail:(__ "," TypeDefinition __ Identifier)* {
        return buildList(head, tail, 3);
    }

FunctionBody
    = body:SourceElements? {
        return {
            type: "BlockStatement",
            body: optionalList(body)
        };
    }

Program
    = body:SourceElements? {
        return {
            type: "File",
            program: {
                type: "Program",
                body: optionalList(body)
            }
        };
    }

SourceElements
    = head:SourceElement tail:(__ SourceElement)* {
        return buildList(head, tail, 1);
    }

SourceElement
  = Statement
  / FunctionDeclaration



CallExpression
  = head:(
      callee:MemberExpression __ args:Arguments {
        return { type: "CallExpression", callee: callee, arguments: args };
      }
    )
    tail:(
        __ args:Arguments {
          return { type: "CallExpression", arguments: args };
        }
      / __ "[" __ property:Expression __ "]" {
          return {
            type:     "MemberExpression",
            property: property,
            computed: true
          };
        }
      / __ "." __ property:IdentifierName {
          return {
            type:     "MemberExpression",
            property: property,
            computed: false
          };
        }
    )*
    {
      return buildTree(head, tail, function(result, element) {
        element[TYPES_TO_PROPERTY_NAMES[element.type]] = result;

        return element;
      });
    }

 
Arguments
  = "(" __ args:(ArgumentList __)? ")" {
      return optionalList(extractOptional(args, 0));
    }

ArgumentList
  = head:AssignmentExpression tail:(__ "," __ AssignmentExpression)* {
      return buildList(head, tail, 3);
    }

UnaryExpression
    = SideExpression
    / operator:UnaryOperator __ argument:UnaryExpression {
      var type = (operator === "++" || operator === "--")
        ? "UpdateExpression"
        : "UnaryExpression";

      return {
        type:     type,
        operator: operator,
        argument: argument,
        prefix:   true
      };
    }

UnaryOperator
  = "++"
  / "--"
  / $("+" !"=")
  / $("-" !"=")
  / "~"
  / "!"

MultiplicativeExpression
  = head:UnaryExpression
    tail:(__ MultiplicativeOperator __ UnaryExpression)*
    { return buildBinaryExpression(head, tail); }

MultiplicativeOperator
  = $("*" !"=")
  / $("/" !"=")
  / $("%" !"=")

AdditiveExpression
  = head:MultiplicativeExpression
    tail:(__ AdditiveOperator __ MultiplicativeExpression)*
    { return buildBinaryExpression(head, tail); }

AdditiveOperator
  = $("+" ![+=])
  / $("-" ![-=])

ShiftExpression
  = head:AdditiveExpression
    tail:(__ ShiftOperator __ AdditiveExpression)*
    { return buildBinaryExpression(head, tail); }

ShiftOperator
  = $("<<"  !"=")
  / $(">>>" !"=")
  / $(">>"  !"=")

RelationalExpression
  = head:ShiftExpression
    tail:(__ RelationalOperator __ ShiftExpression)*
    { return buildBinaryExpression(head, tail); }

RelationalOperator
  = "<="
  / ">="
  / $("<" !"<")
  / $(">" !">")



EqualityExpression
  = head:RelationalExpression
    tail:(__ EqualityOperator __ RelationalExpression)*
    { return buildBinaryExpression(head, tail); }

 
EqualityOperator
  = "==="
  / "!=="
  / "=="
  / "!="

BitwiseANDExpression
  = head:EqualityExpression
    tail:(__ BitwiseANDOperator __ EqualityExpression)*
    { return buildBinaryExpression(head, tail); }

BitwiseANDOperator
  = $("&" ![&=])

BitwiseXORExpression
  = head:BitwiseANDExpression
    tail:(__ BitwiseXOROperator __ BitwiseANDExpression)*
    { return buildBinaryExpression(head, tail); }
 
BitwiseXOROperator
  = $("^" !"=")

BitwiseORExpression
  = head:BitwiseXORExpression
    tail:(__ BitwiseOROperator __ BitwiseXORExpression)*
    { return buildBinaryExpression(head, tail); }

BitwiseOROperator
  = $("|" ![|=])

LogicalANDExpression
  = head:BitwiseORExpression
    tail:(__ LogicalANDOperator __ BitwiseORExpression)*
    { return buildBinaryExpression(head, tail); }

LogicalANDOperator
  = "&&"

LogicalORExpression
  = head:LogicalANDExpression
    tail:(__ LogicalOROperator __ LogicalANDExpression)*
    { return buildBinaryExpression(head, tail); }
 
LogicalOROperator
  = "||"
 
